pipeline {
  agent any
  stages {
    stage('Build') {
      steps {
        sh 'make -j 8'
      }
    }
    stage('Test'){
      steps {
        sh 'make testcover'
        sh '(pylint --rcfile=./grmodel/tests/.pylintrc grmodel > pylint.log || echo "pylint exited with $?")'
      }
    }
    stage('Report') {
      steps {
        step([
          $class: 'CoberturaPublisher',
          autoUpdateHealth: true,
          autoUpdateStability: true,
          coberturaReportFile: 'coverage.xml',
          failNoReports: true,
          failUnhealthy: true,
          failUnstable: true,
          maxNumberOfBuilds: 0,
          onlyStable: false,
          sourceEncoding: 'UTF_8',
          zoomCoverageChart: true])

        step([
          $class: 'TasksPublisher',
          canComputeNew: false,
          defaultEncoding: '', 
          excludePattern: '',
          healthy: '',
          high: 'TODO,FIXME,XXX',
          low: '',
          normal: 'CITE',
          pattern: '**/*.py, **/*.md',
          unHealthy: ''])

        step([
          $class: 'WarningsPublisher',
          parserConfigurations: [[parserName: 'PYLint', pattern: 'pylint.log']],
          unstableTotalAll: '1000',
          usePreviousBuildAsReference: true])

        //archiveArtifacts artifacts: 'Manuscript/Manuscript.pdf', onlyIfSuccessful: true

        publishHTML([
          allowMissing: false,
          alwaysLinkToLastBuild: false,
          keepAll: false,
          reportDir: 'Manuscript',
          reportFiles: 'index.html',
          reportName: 'Manuscript',
          reportTitles: ''])
      }
    }
  }
}
